KwBoolean: "bool"
Id: "not"
LParen: "("
KwBoolean: "bool"
Id: "b"
RParen: ")"
LBrace: "{"
KwIf: "if"
LParen: "("
Id: "b"
Eq: "=="
ConstBoolean: "true"
RParen: ")"
KwReturn: "return"
ConstBoolean: "false"
Semicolon: ";"
KwElse: "else"
KwReturn: "return"
ConstBoolean: "true"
Semicolon: ";"
RBrace: "}"
KwBoolean: "bool"
Id: "morgan11"
LParen: "("
KwBoolean: "bool"
Id: "a"
Comma: ","
KwBoolean: "bool"
Id: "b"
RParen: ")"
LBrace: "{"
KwReturn: "return"
Id: "not"
LParen: "("
Id: "a"
Or: "||"
Id: "b"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwBoolean: "bool"
Id: "morgan12"
LParen: "("
KwBoolean: "bool"
Id: "a"
Comma: ","
KwBoolean: "bool"
Id: "b"
RParen: ")"
LBrace: "{"
KwReturn: "return"
Id: "not"
LParen: "("
Id: "a"
RParen: ")"
And: "&&"
Id: "not"
LParen: "("
Id: "b"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwBoolean: "bool"
Id: "morgan21"
LParen: "("
KwBoolean: "bool"
Id: "a"
Comma: ","
KwBoolean: "bool"
Id: "b"
RParen: ")"
LBrace: "{"
KwReturn: "return"
Id: "not"
LParen: "("
Id: "a"
And: "&&"
Id: "b"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwBoolean: "bool"
Id: "morgan22"
LParen: "("
KwBoolean: "bool"
Id: "a"
Comma: ","
KwBoolean: "bool"
Id: "b"
RParen: ")"
LBrace: "{"
KwReturn: "return"
Id: "not"
LParen: "("
Id: "a"
RParen: ")"
Or: "||"
Id: "not"
LParen: "("
Id: "b"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwFloat: "float"
Id: "dummyFloat"
LParen: "("
KwFloat: "float"
Id: "a"
RParen: ")"
LBrace: "{"
KwFloat: "float"
Id: "b"
Assign: "="
ConstFloat: "1.0"
Semicolon: ";"
KwFloat: "float"
Id: "c"
Assign: "="
ConstFloat: ".5"
Semicolon: ";"
KwFloat: "float"
Id: "d"
Assign: "="
ConstFloat: "1e10"
Semicolon: ";"
KwReturn: "return"
Id: "a"
Asterisk: "*"
ConstFloat: "1.2"
Semicolon: ";"
RBrace: "}"
KwVoid: "void"
Id: "main"
LParen: "("
RParen: ")"
LBrace: "{"
KwBoolean: "bool"
Id: "a"
Assign: "="
ConstBoolean: "true"
Semicolon: ";"
KwBoolean: "bool"
Id: "b"
Assign: "="
ConstBoolean: "true"
Semicolon: ";"
KwInt: "int"
Id: "i"
Assign: "="
ConstInt: "0"
Semicolon: ";"
KwPrintf: "printf"
LParen: "("
ConstString: "\"Testing deMorgans Law\""
RParen: ")"
Semicolon: ";"
KwDo: "do"
LBrace: "{"
KwDo: "do"
LBrace: "{"
KwPrintf: "printf"
LParen: "("
Id: "i"
RParen: ")"
Semicolon: ";"
KwPrintf: "printf"
LParen: "("
Id: "morgan11"
LParen: "("
Id: "a"
Comma: ","
Id: "b"
RParen: ")"
RParen: ")"
Semicolon: ";"
KwPrintf: "printf"
LParen: "("
Id: "morgan12"
LParen: "("
Id: "a"
Comma: ","
Id: "b"
RParen: ")"
RParen: ")"
Semicolon: ";"
KwPrintf: "printf"
LParen: "("
Id: "morgan21"
LParen: "("
Id: "a"
Comma: ","
Id: "b"
RParen: ")"
RParen: ")"
Semicolon: ";"
KwPrintf: "printf"
LParen: "("
Id: "morgan22"
LParen: "("
Id: "a"
Comma: ","
Id: "b"
RParen: ")"
RParen: ")"
Semicolon: ";"
Id: "i"
Assign: "="
Id: "i"
Plus: "+"
ConstInt: "1"
Semicolon: ";"
Id: "b"
Assign: "="
Id: "not"
LParen: "("
Id: "b"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwWhile: "while"
LParen: "("
Id: "b"
Neq: "!="
ConstBoolean: "true"
RParen: ")"
Semicolon: ";"
Id: "a"
Assign: "="
Id: "not"
LParen: "("
Id: "a"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwWhile: "while"
LParen: "("
Id: "a"
Neq: "!="
ConstBoolean: "true"
RParen: ")"
Semicolon: ";"
RBrace: "}"